// [문제 링크]: https://www.acmicpc.net/problem/16234

import java.io.*;
import java.util.*;
​
public class Main {
    static boolean hasUnionToday;
    static int N, L, R;
    static int dayOfChange;
    static int [] dirX = {-1, 1, 0, 0};
    static int [] dirY = {0, 0, -1, 1}; 
    static int[][] union;
    static int[][] map;
    static int[][] unionMap;
    
    static void searchUnion(int a, int b) {
        if (unionMap[a][b] == 0) {
            unionMap[a][b] = (N * a) + b + 1;
        }
        
        for (int d = 0; d < 4; d++) {
            int dx = a + dirX[d];
            int dy = b + dirY[d];
            
            if(dx >= 0 && dx < N && dy >= 0 && dy < N) {
                int diff = Math.abs(map[a][b] - map[dx][dy]);
                
                if (unionMap[a][b] != unionMap[dx][dy] && diff >= L && diff <= R) {
                    hasUnionToday = true;
                    unionMap[dx][dy] = unionMap[a][b];
                    searchUnion(dx, dy);
                }
            }
        }
    }
    
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        N = Integer.parseInt(st.nextToken());
        L = Integer.parseInt(st.nextToken());
        R = Integer.parseInt(st.nextToken());
        
        dayOfChange = 0;
        
        map = new int[N][N];
​
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < N; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }   
        
        while (true) {
            union = new int[N * N + 1][2];
            unionMap = new int[N][N];
            hasUnionToday = false;
​
            for (int i = 0; i < N ; i++) {
                for (int j = 0; j < N ; j++) {
                    searchUnion(i, j);
                }
            }
​
            if (hasUnionToday == false) {
                System.out.println(dayOfChange);
                break;
            }
​
            dayOfChange += 1;
​
            for (int i = 0; i < N ; i++) {
                for (int j = 0; j < N ; j++) {
                    union[unionMap[i][j]][0] += 1;
                    union[unionMap[i][j]][1] += map[i][j];
                }
            }
            
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    map[i][j] = union[unionMap[i][j]][1] / union[unionMap[i][j]][0];
                }
            }
        }
        br.close();
    }
}