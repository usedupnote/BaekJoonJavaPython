import java.io.*;
import java.util.*;

public class Main {
	public static void main(String[] args) throws IOException {
		/*
		 [문제]
		사탕가게에 설탕을 정확하게 N킬로그램을 배달
		설탕은 봉지에 담겨져 있음
		(3킬로그램 봉지 / 5킬로그램 봉지)
		
		최대한 적은 봉지 사용
		
		설탕을 N킬로그램 배달해야 할 때, 
		봉지 몇 개를 가져가면 되는지 구하라
		
		[입력]
		첫째 줄에 N (3 ≤ N ≤ 5000)
		
		[출력]
		배달하는 봉지의 최소 개수를 출력
		만약, 정확하게 N킬로그램을 만들 수 없다면 -1을 출력
		 */
		Scanner sc = new Scanner(System.in);
		
		int N = sc.nextInt();	// 배송할 설탕량 입력
		
		int result = -1;		// 결과값 출력을 위한 값 초기화
								// (값 재할당이 안될 경우 -1로 출력하기 위해 -1로 초기화)
		/*
		논리
		이 문제는 5kg = x봉지, 3kg = y봉지 일 경우 나누어떨어지는 x + y를
		구하는 문제이다.
		즉, N(배송할 설당량) = (5 * x) + (3 * y) 에서 x와 y의 합의 최솟값을 구하는 문제이다.
		
		위 식을 풀면
		N = (5 * x) + ((5 - 2) * y)
		N = (5 * x) + (5 * y - 2 * y)
		N = (5 * (x + y)) - (2 * y)
		N + (2 * y) = 5 * (x + y)
		가 되고, 여기서 5로 나누어 떨어지는 N + (2 * y)의 최솟값을 
		구하게 된다면 x + y의 최솟값을 수할 수 있을 것이라는 생각으로
		아래외 같이 풀게 되었음
		*/
		
		// 3과 5의 최소공배수인 15kg을 만들기 위해서는 3kg 5봉지가 필요
		// 즉 3kg 봉지가 5개가 모이면 15kg 3봉지를 모으는 것과 같은 효과를
		// 가지기 떄문에 이 이상 계산하지 않아도 되니 
		// 반복문은 두 봉투의 차이인 2kg을 5번 한 만큼인 총 10kg까지만 돌린다.
		
		for (int i = 0; i < 5; i++) {
			if((N-(i * 3)) % 5 == 0 && (N-(i * 3)) >= 0) {    // 3kg 봉투의 갯수에 따라서 나누어떨어지는지 확인
				result = (N+(i * 2)) / 5;    // 결과값에 전체 봉투의 갯수 출력				}
				break; // 반복문 탈출
			}
		}
		System.out.println(result);
		
		sc.close();
	}
}
    
// 후기 : 점화식을 최대한 복잡하지 않게 짜고 싶어서 짰는데, 오히려 더 복잡해진 것 같습니다.
//        정석대로 가는 것과 크게 차이 없거나 더 느리지 않을까 하는 생각입니다.